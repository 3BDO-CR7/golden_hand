import React, {Component} from 'react';import {connect} from 'react-redux';import {Body, Button, Container, Content, Header, Icon, Left, Textarea, Title} from "native-base";import {NavigationEvents} from "react-navigation";import styles from "../../assets/style";import i18n from "../../locale/i18n";import {Image, ImageBackground, Text, KeyboardAvoidingView, View, FlatList, Platform} from "react-native";import axios from "axios";import CONST from "../consts";const isIOS = Platform.OS === 'ios';class Inbox extends Component {	constructor(props){		super(props);		this.state= {			refreshed: false,            messages : [],            message : ''		}	}	componentWillMount(){        this.setState({loader: true});        axios({            url         :  CONST.url + 'inbox',            method      :  'POST',            data        :  { lang: this.props.lang , room : this.props.navigation.state.params.room },            headers     :  {Authorization: this.props.navigation.state.params.token}        }).then(response => {            this.setState({messages : response.data.data , loader:  false})        })	}    sendMessage(){        this.setState({loader: true});        console.log('room is : ' , this.props.navigation.state.params.room)        axios({            url         :  CONST.url + 'send_message',            method      :  'POST',            data        :  { lang: this.props.lang,message: this.state.message , room : this.props.navigation.state.params.room, order_id : this.props.navigation.state.params.order_id },            headers     :  {Authorization: this.props.navigation.state.params.token}        }).then(response => {        	console.log('sendMessage',response.data.data)            this.state.messages.push(response.data.data);            this.setState({message : ''})        })	}	renderItems(msg){		if (msg.s_id !== this.props.user.id){			return(				<View style={styles.senderMsg}>					<Text style={[ styles.senderText, styles.textRegular ]}>{ msg.message }</Text>				</View>			)		} else{			return(				<View style={{ flexDirection: 'row', alignSelf: 'flex-end' }}>					<View style={styles.reciverMsg}>						<Text style={[styles.reciverText, styles.textRegular]}>{ msg.message }</Text>					</View>				</View>			)		}	}	onFocus(){		this.componentWillMount();	}	render() {		return (			<Container>				<NavigationEvents onWillFocus={() => this.onFocus()}/>				<Header style={styles.headerView}>					<Left style={styles.leftIcon}>						<Button style={styles.Button} transparent onPress={() => this.props.navigation.goBack()}>							<Icon style={[styles.text_midBrown, styles.textSize_22]} type="AntDesign" name='right'/>						</Button>					</Left>					<Body style={styles.bodyText}>						<Title							style={[styles.textRegular, styles.text_midBrown, styles.textSize_20, styles.textLeft, styles.Width_100, styles.paddingHorizontal_0, styles.paddingVertical_0]}>							{i18n.t('chat')}						</Title>					</Body>				</Header>                <KeyboardAvoidingView behavior="height" style={{  flex: 1}} >				<ImageBackground source={require('../../assets/images/bg_img.png')} style={[styles.bgFullWidth]}>					<Content contentContainerStyle={styles.bgFullWidth} style={styles.bgFullWidth}>						<FlatList							data                    = {this.state.messages}							renderItem              = {({item}) => this.renderItems(item)}							numColumns              = {1}							keyExtractor            = {this._keyExtractor}							extraData               = {this.state.refreshed}							onEndReachedThreshold   = {isIOS ? .01 : 1}						/>						{                            (this.props.navigation.state.params.status === 1)                                ?                                <View style={[styles.writeMassage]}>                                    <Button  onPress={() => {this.sendMessage()}} style={[styles.btn_massage, {zIndex : 99}]}  disabled={this.state.message === ''}>                                        <Icon   type="Entypo" name='paper-plane' />                                    </Button>                                    <Textarea onChangeText={(message)=> { this.setState({message:message})}} style={styles.input_chat} placeholder={i18n.t('message')}   value={this.state.message}/>                                </View>                                :                                <View style={{justifyContent:'center'}}>                                    <Text style={{textAlign:'center', fontFamily:'cairo' , color :'#1a1a1a' , fontSize : 18}}>{i18n.t('chat_closed')}</Text>								</View>						}					</Content>				</ImageBackground>                </KeyboardAvoidingView>			</Container>		);	}}function mapStateToProps({ lang , profile })  {    return {        lang  	 : lang.lang,        user     : profile.user,    };}export default connect(mapStateToProps,{})(Inbox);